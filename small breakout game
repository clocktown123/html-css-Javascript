<!DOCTYPE html>
<html lang="en-US"></html>
<head>
    <meta charset="utf-8" />
    <title>Potato!</title>

    <!-------------------css section---------------------->
    <style>
        *{
            padding: 0;
            margin: 0;
        }

        canvas{
            background: #7b1069;
            display: block;
            margin: 0 auto;
        }
    </style>
    <!-----------------------end of css-------------------------------->
</head>

<body>
    <canvas id="myCanvas" width="600" height="600"></canvas>

	<!-------------javascript section------------------------>
	<script>
		var canvas = document.getElementById("myCanvas")
		var ctx = canvas.getContext("2d");

		// ball variables
		var BallX = canvas.width/2;
		var BallY = canvas.height-30;
		var bVx = 2;
		var bVy = -2.3;
        var ballRadius = 10;

        //paddle variables
        var paddleHeight = 10;
        var paddleWidth = 75;
        var paddleX = (canvas.width - paddleWidth) / 2;
        let interval = 0;


        var rightPressed = false
        var leftPressed = false

        //brick variables
        const brickRowCount = 3;
        const brickColumnCount = 6;
        const brickWidth = 75;
        const brickHeight = 20;
        const brickPadding = 10;
        const brickOffsetTop = 30;
        const brickOffsetLeft = 30;

        const bricks = [];

        var score = 0;

        var fnafColors = ['#B53737', '#1C2951', '#D5B85A', '#402F1D', '#808080']

        //loop over each column of bricks. think of 'c' as each column in a grid.
        for (let c = 0; c < brickColumnCount; c++){
            bricks[c] = []; // start a new row in the current column

            for (let r = 0; r < brickRowCount; r++){
                //set the starting posistion of each brick at coordinates (0, 0)
                // We'll change these coordinates to spread the bricks out in a grid
                bricks[c][r] = {x: 0, y: 0, isAlive: 1};
            }
        }

        function drawBricks(){
            // loop through each column of bricks
            for (let c = 0; c < brickColumnCount; c++){
                //loop through each row of bricks in the current column
                for (let r = 0; r < brickRowCount; r++){

                    if (bricks[c][r].isAlive == 1){
                        //calculate the x position of each brick based on its column number (c)
                        // the bricks width, the padding between bricks, and the left offset
                        const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;

                        //calculate the y position of each brick based on its row number (r)
                        // the bricks width, the padding between bricks, and the left offset
                        const brickY = r * (brickHeight + brickPadding) + brickOffsetTop;

                        //update the position of each brick in the array
                        bricks[c][r].x = brickX;
                        bricks[c][r].y = brickY;

                        //start drawing the brick
                        ctx.beginPath 
                        //draw a rectangle at the position (brickX, brickY) with the specified width and height
                        ctx.rect(brickX, brickY, brickWidth, brickHeight);
                        //set the color of the brick
                        ctx.fillStyle = "#0095DD";
                        // fill the brick with the set color.
                        ctx.fill();
                        // finish the drawing path
                        ctx.closePath();
                    }
                }
            }

            
        }

        function BrickCollision(){
            for (let c = 0; c < brickColumnCount; c++){
                for (let r = 0; r < brickRowCount; r++){
                    const b = bricks[c][r];
                    if (b.isAlive === 1){
                        if(
                            BallX > b.x &&
                            BallX < b.x+brickWidth &&
                            BallY > b.y &&
                            BallY < b.y+brickHeight
                        ){
                            bVy = -bVy;
                            score += 1;
                            b.isAlive = 0;
                        }
                    }
                }
            }
        }

        //keyboard input
        document.addEventListener("keydown", keyDownHandler, false);
        document.addEventListener("keyup", keyUpHandler, false);

        function keyDownHandler(e){
            if(e.code == "ArrowRight"){
                rightPressed = true;
            }
            else if(e.code == 'ArrowLeft'){
                leftPressed = true;
            }
        }

        function keyUpHandler(e){
            if(e.code == "ArrowRight"){
                rightPressed = false;
            }
            else if(e.code == "ArrowLeft"){
                leftPressed = false;
            }
        }

        //ball functions---------------------------------------------------------------

		function drawBall(){
			ctx.beginPath();
			ctx.arc(BallX, BallY, 10, 0, Math.PI*2);
			ctx.fillStyle = "#0095DD";
			ctx.fill();
			ctx.closePath();
		}

        function moveBall(){
             //collision with left and right wall

			BallX += bVx;
			BallY += bVy;
        }
        
        //paddle functions-----------------------------------------------------------------------

        function drawPaddle(){
            ctx.beginPath();
			ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
			ctx.fillStyle = "#0095DD";
			ctx.fill();
			ctx.closePath();
        }

        function movePaddle(){
            if(rightPressed == true){
                paddleX += 5
            }
            else if(leftPressed == true){
                paddleX -= 5
            }
            else{
                paddleX += 0
            }

        }

        function checkCollision(){
            if(BallX + bVx > canvas.width-ballRadius || BallX + bVx < ballRadius){
                bVx = -bVx;
            }
            
            if(BallY + bVy < ballRadius){
                bVy = -bVy;
            }
            
            if (BallY + bVy > canvas.height - ballRadius){
                if(BallX > paddleX && BallX < paddleX + paddleWidth){
                    bVy = -bVy;
                    console.log("hit the paddle");
                } else{
                    alert("game over");
                    document.location.reload();
                    clearInterval(interval);
                }
            }

        }

        function drawScore(){
            ctx.font = "16px Arial";
            ctx.fillStyle = "#FFFFFF"
            ctx.fillText(`Score: ${score}`, 8, 20);
            if(score === brickRowCount * brickColumnCount){
                alert("YOU WIN, GG");
                document.location.reload();
                clearInterval(interval);
            }
        }

        function drawMessage(){
            const message1 = ["y", "o", "u"];
            const message2 = ["a", "r", "e"];
            const message3 = ["l", "o", "v", "e", "d"];

            ctx.font = "30px Arial";
            ctx.fillStyle = "#FFFFFF";

            message1.forEach((text, index) => {
                const textX = brickWidth * 4 + (index * (brickWidth + brickPadding))
                const textY = brickHeight;
                ctx.fillText(text, textX, textY);
            })
            message2.forEach((text, index) => {
                const textX = brickWidth * 4 + (index * (brickWidth + brickPadding))
                const textY = brickHeight * 2 + brickPadding;
                ctx.fillText(text, textX, textY);
            })
            message3.forEach((text, index) => {
                const textX = brickWidth * 3 + (index * (brickWidth + brickPadding))
                const textY = brickHeight * 3 + brickPadding * 2;
                ctx.fillText(text, textX, textY);
            })
        }

		function draw(){
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			drawBall();
            moveBall();
            drawPaddle();
            movePaddle();
            checkCollision();
            drawBricks();
            BrickCollision();
            drawScore();
            //drawMessage();

		}



		interval = setInterval(draw,10);

	</script>
	<!---------------end of javascript section-------------->
</body>
